@import "scss/mixins";
@import "scss/variables";

.input {
  display: flex;
  position: relative;
  border-radius: 3px;
  background-color: white;
  border: 2px solid transparent;
  transition: 0.2s;
  border-radius: 4px;
  z-index: 0;
  @include boxShadowMultiple(
    0 1px 5px rgba(0, 0, 0, 0.2),
    0 3px 4px rgba(0, 0, 0, 0.12),
    0 2px 4px rgba(0, 0, 0, 0.14)
  );

  &::before {     
    content: attr(data-label);
    position: absolute;
    top: 0;
    left: 0.75rem;
    padding: 0 0.75rem;
    color: $orange;
    transition: 0.2s;
    background-color: white;
    font-size: 2rem;
    line-height: 2rem;
    transform: translateY(80%);
    z-index: -1;
  }

  > input {
    height: 5.4rem;
    min-width: 25rem;
    width: 100%;
    padding: 0 4rem 0 1.5rem;
    font-size: 2rem;
    background-color: none;
    background: none;

    /* get rid of chrome's background color change of auto fill ;) */
    &:-webkit-autofill,
    &:-webkit-autofill:hover, 
    &:-webkit-autofill:focus, 
    &:-webkit-autofill:active  {
    -webkit-box-shadow: 0 0 0 30px white inset !important;
}

  }

  //icon
  > div[icon] {
    position: absolute;
    right: 2px;
    top: 0;
    bottom: 0;
    width: 4rem;
    font-size: 2rem;
    color: $orange;
  }

  > span {
    position: absolute;
    left: 1.5rem;
    bottom: -2rem;
    font-size: 1.2rem;
    line-height: 1.2rem;
    opacity: 0.7;
    color: black;
    transition: 0.3s;
    &.withAction:hover {
      opacity: 0.9;
      cursor: pointer;
    }
  }

  &.inputFocused {
    border: 2px solid $orange;
    &::before,
    > div[icon] {
      color: $orange;
    }
    @include boxShadow(0, 0, 0, 0, 0);
  }

  &.error {
    border-color: $error;
    color: $error;
    &::before,
    > div[icon] {
      color: $error;
    }
    @include boxShadowMultiple(none);
  }

  &.error,
  &.inputFocused {
    &::before {
      content: attr(data-label);
      position: absolute;
      transform: translateY(-0.75rem);
      font-size: 1.4rem;
      line-height: 1.4rem;
      z-index: 1;
    }
  }
  
  &.isOptional:not(.inputFocused) {
    &::before {
      content: attr(data-label) ' - optional';
    }
  }
}
